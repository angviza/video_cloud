# Spring boot application
server.port=8115

# Dubbo Config properties
dubbo.scan.basePackages=com.hdvon.client
dubbo.application.id=npm-client-provider
dubbo.application.name=npm-client-provider
### RegistryConfig Bean
dubbo.registry.id=my-registry
dubbo.registry.address=127.0.0.1:2181
dubbo.registry.protocol=zookeeper
## ProtocolConfig Bean
dubbo.protocol.id=dubbo
dubbo.protocol.name=dubbo
dubbo.protocol.port=20885
# Provider config
dubbo.provider.timeout=20000

spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://192.168.2.216:3306/nmp?useUnicode=true&characterEncoding=utf8&useSSL=false&zeroDateTimeBehavior=convertToNull
spring.datasource.username=root
spring.datasource.password=rootroot
spring.datasource.initialSize=5
spring.datasource.minIdle=5
spring.datasource.maxActive=20
spring.datasource.maxWait=60000
spring.datasource.timeBetweenEvictionRunsMillis=60000
spring.datasource.minEvictableIdleTimeMillis=300000
spring.datasource.validationQuery=SELECT 1 FROM DUAL
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
spring.datasource.poolPreparedStatements=true
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
spring.datasource.filters=stat,wall,log4j
spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000

#mybatis
mybatis.type-aliases-package=com.hdvon.client.mapper
mybatis.mapper-locations=classpath:com/hdvon/client/mapper/**Mapper.xml

#mapper.mappers=com.hdvon.client.config.mybatis.MyMapper
mapper.not-empty=false
mapper.identity=MYSQL

#pagehelper
pagehelper.helperDialect=mysql
pagehelper.reasonable=true
pagehelper.supportMethodsArguments=true
pagehelper.params=count=countSql

#logging.level.root=TRACE
logging.level.com.hdvon=DEBUG

snowflakeWorkId=1


spring.redis.host=192.168.2.119
spring.redis.port=6379
spring.redis.password=123456

#################redis\u7EBF\u7A0B\u6C60\u8BBE\u7F6E#################
# redis\u8FDE\u63A5\u6C60\u7684\u6700\u5927\u8FDE\u63A5\u6570
spring.redis.pool.max-active=10
# redis\u8FDE\u63A5\u6C60\u7684\u6700\u5927\u7B49\u5F85\u65F6\u95F4\uFF0C-1\u8868\u793A\u65E0\u9700\u7B49\u5F85
spring.redis.pool.max-wait=-1
# redis\u8FDE\u63A5\u6C60\u7684\u6700\u5927\u7A7A\u95F2\u65F6\u95F4
spring.redis.pool.max-idle=8
# redis\u8FDE\u63A5\u6C60\u7684\u6700\u5C0F\u7A7A\u95F2\u65F6\u95F4  
spring.redis.pool.min-idle=0
# redis\u7684\u8BF7\u6C42\u8D85\u65F6\u65F6\u95F4
spring.redis.timeout=15000

# elasticsearch
elasticsearch.ip=192.168.2.119
elasticsearch.port=9300
elasticsearch.pool=5
elasticsearch.cluster.name=elasticsearch

#create index flag
elasticsearch.regenerateIndexEnabled=true
#Is data synchronization enabled
elasticsearch.syncDataEnabled=false

#elasticsearch.regenerateIndexEnabled=true
#elasticsearch.syncDataEnabled=true


# rabbitmq
#spring.rabbitmq.host=@spring.rabbitmq.host@
#spring.rabbitmq.port=@spring.rabbitmq.port@
#spring.rabbitmq.username=@spring.rabbitmq.username@
#spring.rabbitmq.password=@spring.rabbitmq.password@
#spring.rabbitmq.publisherconfirms=true


#============== kafka ===================
#\u4EE5\u9017\u53F7\u5206\u9694\u7684\u4E3B\u673A\uFF1A\u7AEF\u53E3\u5BF9\u5217\u8868\uFF0C\u7528\u4E8E\u5EFA\u7ACB\u4E0EKafka\u7FA4\u96C6\u7684\u521D\u59CB\u8FDE\u63A5\u3002
spring.kafka.bootstrap-servers=192.168.2.119:9092

#\u6D88\u8D39\u8005\u4E00\u6B21\u8C03\u7528poll()\u64CD\u4F5C\u65F6\u8FD4\u56DE\u7684\u6700\u5927\u8BB0\u5F55\u6570\uFF0C\u9ED8\u8BA4\u503C\u4E3A500
spring.kafka.consumer.max-poll-records=1000

#\u8F6E\u8BE2\u6D88\u8D39\u8005\u65F6\u4F7F\u7528\u7684\u8D85\u65F6\uFF08\u4EE5\u6BEB\u79D2\u4E3A\u5355\u4F4D\uFF09
spring.kafka.listener.poll-timeout=3000

#\u5982\u679C'enable.auto.commit'\u4E3Atrue\uFF0C\u5219\u6D88\u8D39\u8005\u504F\u79FB\u81EA\u52A8\u63D0\u4EA4\u7ED9Kafka\u7684\u9891\u7387\uFF08\u4EE5\u6BEB\u79D2\u4E3A\u5355\u4F4D\uFF09\uFF0C\u9ED8\u8BA4\u503C\u4E3A5000\u3002
spring.kafka.consumer.auto-commit-interval=100

#\u5F53Kafka\u4E2D\u6CA1\u6709\u521D\u59CB\u504F\u79FB\u91CF\u6216\u8005\u670D\u52A1\u5668\u4E0A\u4E0D\u518D\u5B58\u5728\u5F53\u524D\u504F\u79FB\u91CF\u65F6\u8BE5\u600E\u4E48\u529E\uFF0C\u9ED8\u8BA4\u503C\u4E3Alatest\uFF0C\u8868\u793A\u6D88\u8D39\u8005\u81EA\u52A8\u5C06\u504F\u79FB\u91CD\u7F6E\u4E3A\u6700\u65B0\u7684\u504F\u79FB\u91CF
#\u53EF\u9009\u7684\u503C\u4E3Alatest, earliest, none
spring.kafka.consumer.auto-offset-reset=latest

#\u5982\u679C\u4E3Atrue\uFF0C\u5219\u6D88\u8D39\u8005\u7684\u504F\u79FB\u91CF\u5C06\u5728\u540E\u53F0\u5B9A\u671F\u63D0\u4EA4\uFF0C\u9ED8\u8BA4\u503C\u4E3Atrue
spring.kafka.consumer.enable-auto-commit=true

#\u7528\u4E8E\u6807\u8BC6\u6D88\u8D39\u8005\u6240\u5C5E\u7684\u4F7F\u7528\u8005\u7EC4\u7684\u552F\u4E00\u5B57\u7B26\u4E32\u3002
spring.kafka.consumer.group-id=cameraLogGroup

#\u6D88\u8D39\u8005key\u7684\u53CD\u5E8F\u5217\u5316\u5668\u7C7B\uFF0C\u5B9E\u73B0\u7C7B\u5B9E\u73B0\u4E86\u63A5\u53E3org.apache.kafka.common.serialization.Deserializer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer

#\u6D88\u8D39\u8005value\u7684\u53CD\u5E8F\u5217\u5316\u5668\u7C7B\uFF0C\u5B9E\u73B0\u7C7B\u5B9E\u73B0\u4E86\u63A5\u53E3org.apache.kafka.common.serialization.Deserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

#\u5728\u4FA6\u542C\u5668\u5BB9\u5668\u4E2D\u8FD0\u884C\u7684\u7EBF\u7A0B\u6570
spring.kafka.listener.concurrency=8