# Spring boot application
spring.application.name=npm-quartz
server.port=8011

# Dubbo Config properties
dubbo.scan.basePackages=com.hdvon.quartz.service
dubbo.application.id=npm-quartz-provider
dubbo.application.name=npm-quartz-provider
### RegistryConfig Bean
dubbo.registry.id=my-registry
dubbo.registry.address=@dubbo.registry.address@
dubbo.registry.protocol=zookeeper
## ProtocolConfig Bean
dubbo.protocol.id=dubbo
dubbo.protocol.name=dubbo
dubbo.protocol.port=20889
# Provider config
dubbo.provider.timeout=20000

spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=@spring.datasource.url@
spring.datasource.username=@spring.datasource.username@
spring.datasource.password=@spring.datasource.password@
spring.datasource.initialSize=5
spring.datasource.minIdle=5
spring.datasource.maxActive=20
spring.datasource.maxWait=60000
spring.datasource.timeBetweenEvictionRunsMillis=60000
spring.datasource.minEvictableIdleTimeMillis=300000
spring.datasource.validationQuery=SELECT 1 FROM DUAL
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
spring.datasource.poolPreparedStatements=true
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
spring.datasource.filters=stat,wall,log4j
spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000

#mybatis
mybatis.type-aliases-package=com.hdvon.quartz.entity
mybatis.mapper-locations=classpath:com/hdvon/quartz/**/**Mapper.xml
#mapper.notEmpty=true

#redis
spring.redis.host=@spring.redis.host@
spring.redis.port=@spring.redis.port@
spring.redis.password=@spring.redis.password@

#################redis线程池设置#################
# redis连接池的最大连接数?
spring.redis.pool.max-active=10
# redis连接池的最大等待时间，-1表示无需等待
spring.redis.pool.max-wait=-1
# redis连接池的最大空闲时间
spring.redis.pool.max-idle=8
# redis连接池的最小空闲时间  
spring.redis.pool.min-idle=0
# redis的请求超时时间
spring.redis.timeout=15000


#============== kafka ===================
#以逗号分隔的主机：端口对列表，用于建立与Kafka群集的初始连接。
spring.kafka.bootstrap-servers=@spring.kafka.bootstrap-servers@

#消费者一次调用poll()操作时返回的最大记录数，默认值为500
spring.kafka.consumer.max-poll-records=1000

#轮询消费者时使用的超时（以毫秒为单位）
spring.kafka.listener.poll-timeout=3000

#如果'enable.auto.commit'为true，则消费者偏移自动提交给Kafka的频率（以毫秒为单位），默认值为5000。
spring.kafka.consumer.auto-commit-interval=100

#当Kafka中没有初始偏移量或者服务器上不再存在当前偏移量时该怎么办，默认值为latest，表示消费者自动将偏移重置为最新的偏移量
#可选的值为latest, earliest, none
spring.kafka.consumer.auto-offset-reset=latest

#如果为true，则消费者的偏移量将在后台定期提交，默认值为true
spring.kafka.consumer.enable-auto-commit=true

#用于标识消费者所属的使用者组的唯一字符串。
spring.kafka.consumer.group-id=quartzLogGroup

#消费者key的反序列化器类，实现类实现了接口org.apache.kafka.common.serialization.Deserializer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer

#消费者value的反序列化器类，实现类实现了接口org.apache.kafka.common.serialization.Deserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

#在侦听器容器中运行的线程数
spring.kafka.listener.concurrency=8

#logging.level.root=TRACE
logging.level.com.hdvon=DEBUG